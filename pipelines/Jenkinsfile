#!/usr/bin/env groovy 
pipeline {
  agent none
  triggers {
    pollSCM('* * * * *')
  }
   environment {
                 JEST_JUNIT_OUTPUT_DIR='../reports' 
               }
  stages{
    stage('Check'){
       agent {
    dockerfile {
        filename 'agents/Dockerfile.agent'
    }
}
        steps{
          echo "Put steps here!"
  }
}
     stage('Build'){
       parallel{
         stage('Frontend'){
            agent {
              dockerfile {
                filename 'agents/Dockerfile.agent'
                args '-v frontend_cache:/var/jenkins_home/workspace/web-deployment_master/frontend/node_modules/'
    }
}
           environment {
              SERVICE='frontend' 
            }
           stages{
             
             stage('Install packages') { 
          steps {
            dir("${SERVICE}"){
              sh 'npm install'
            }
          }
        }
             stage('Unit Tests') {
          environment {
            JEST_JUNIT_OUTPUT_NAME="${SERVICE}.xml" 
          }
      steps {
        dir("${SERVICE}"){ 
          sh 'npm run test:ci'
        }
        junit "reports/${SERVICE}.xml"
      }
    }
    stage("Create S3 Artifacts"){
      steps{
              zip zipFile: "frontend.zip", dir:"${SERVICE}",glob: 'src/,*'
              withAWS(credentials:"aws", region:"eu-central-1"){
                s3Upload(includePathPattern:"*.zip",bucket:"kcs-artifacts/karaokemp-website/COMMIT-${GIT_COMMIT}")
              }
      }
    }
           }
         }   
            stage('Cloud'){
              agent {
                dockerfile {
                  filename 'agents/Dockerfile.lambda'
                }
              }                
stages{
  stage("Create S3 Artifacts"){
    steps{
             dir('cloud'){
                sh 'pip install -r requirements.txt -t requirements'
                withAWS(credentials:"aws", region:"eu-central-1"){
                sh "sam package \
                    --template-file template.yaml \
                    --output-template-file packaged.yaml \
                    --s3-bucket kcs-artifacts \
                    --s3-prefix karaokemp-website/COMMIT-${GIT_COMMIT}/cloud-services"
                    s3Upload(includePathPattern:"packaged.yaml",bucket:"kcs-artifacts/karaokemp-website/COMMIT-${GIT_COMMIT}/cloud-services")
                    s3Upload(includePathPattern:"samconfig.toml",bucket:"kcs-artifacts/karaokemp-website/COMMIT-${GIT_COMMIT}/cloud-services")
                    archiveArtifacts artifacts: "packaged.yaml"
                    archiveArtifacts artifacts: "samconfig.toml"
              }    
             }
           }
  }
}         
         }
       }
     }
  stage('Acceptance Tests') {
      environment {
        JEST_JUNIT_OUTPUT_NAME="integration.xml" 
      }
      agent {
          dockerfile {
            filename 'agents/Dockerfile.agent'
      }
} 
            
      steps {
      build job: '../web-deployment/master',
      parameters:[string(name: "DEPLOY_COMMIT", value:"${GIT_COMMIT}"), string(name: "ENVIRONMENT", value:"integration")]
      dir('integration-tests'){
        sh 'npm i'
        sh 'npm run test:ci'
      }
      junit "reports/integration.xml"

      }
    }
        stage('Production'){
          agent any
           steps {
              build job: '../web-deployment/master',
              parameters:[string(name: "DEPLOY_COMMIT", value:"${GIT_COMMIT}"), string(name: "ENVIRONMENT", value:"production")]
            }
        }
       }
}