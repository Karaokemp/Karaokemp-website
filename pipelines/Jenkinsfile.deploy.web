pipeline {
    agent {
    dockerfile {
        filename 'agents/Dockerfile.agent'
        //args '-v /var/run/docker.sock:/var/run/docker.sock'
        args '-v frontend_cache:/var/jenkins_home/workspace/web-deployment_master/frontend/node_modules/'
    }
}
    options {
        skipDefaultCheckout false
  }
    parameters {
        string(name: 'DEPLOY_COMMIT', description: 'commit to deploy to website')
        choice(name: 'ENVIRONMENT', choices: ['test', 'integration', 'production'], description: 'Choose Deployment Target')
    }
    environment {
        DNS = "www.karaokemp.freeddns.org"
        STACK_NAME = getStackName()
        //FRONTEND_BUCKET = getFrontendBucket()
        //WEBSITE_URL = getWebsiteURL("${STACK_NAME}")
    }
    stages {
        stage("Cloud Services") {
            steps {
                withAWS(credentials:"aws", region:"eu-central-1") { 
                    s3Download(file:'template.yaml', bucket:'karaokemp-artifacts', path:"karaokemp-website/COMMIT-${DEPLOY_COMMIT}/cloud-services/packaged.yaml", force:true)
                    s3Download(file:'samconfig.toml',bucket:'karaokemp-artifacts', path:"karaokemp-website/COMMIT-${DEPLOY_COMMIT}/cloud-services/samconfig.toml", force:true)
                    archiveArtifacts artifacts: "*.yaml"
                    archiveArtifacts artifacts: "*.toml"

                    sh "sam deploy --stack-name ${STACK_NAME} > output.yaml"
                    archiveArtifacts artifacts: "output.yaml" 

                    
                }
            }
        }      
        stage('Transfer Website files') {
            steps{

                script{
                    def outputs = readYaml(file: 'output.yaml')
                    outputs.each { key, value ->
                        echo "Walked through key $key and value $value"
                    }
                }             
            /*environment{
            REACT_APP_KARAOKEMP_API="${WEBSITE_URL}"
            RONTEND_BUCKET = getFrontendBucket()
            WEBSITE_URL = getWebsiteURL("${STACK_NAME}")
            }*/
                withAWS(credentials:"aws", region:"eu-central-1") {
                    sh "aws s3 sync  s3://karaokemp-artifacts/karaokemp-website/${DEPLOY_COMMIT}/frontend frontend"
                    dir('frontend'){
                        sh 'npm install'
                        sh 'npm run build'
                        sh "aws s3 sync build s3://${getFrontendBucket()} --acl public-read"
                    }
                }
            }
    }
    stage("Smoke Test"){
        steps{
            sh  "curl -i ${getWebsiteURL(getStackName())}"

        }
    }
        
   
    }
     post{
        success{
            buildDescription "${getWebsiteURL(getStackName())}" 
        }
    }
}
String getStackName() {
    script {
        def baseName = 'kcs'
        String stackName = "${ENVIRONMENT}" == 'production' ? baseName : "${baseName}-${ENVIRONMENT}"
        return stackName
    }
}
String getFrontendBucket() {
    script {
        String bucketName = "${ENVIRONMENT}" == 'production' ? "${DNS}" : "${STACK_NAME}-website-frontend"
        return bucketName
    }
}
String getWebsiteURL(String stackName){
  return getStackParameter($STACK_NAME,'Website')
}
String getStackParameter(String stackName,String parameter){
  script{
        withAWS(credentials:"aws", region:"eu-central-1"){

    def ret = sh(script: "aws cloudformation describe-stacks --stack-name ${stackName} --query \"Stacks[0].Outputs[?OutputKey==\'${parameter}\'].OutputValue\" --output text", returnStdout: true)
    return ret
    }        
  } 
}