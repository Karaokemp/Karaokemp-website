pipeline {
    environment {
        DNS = "www.karaokemp.freeddns.org"
        STACK_NAME = getStackName()
    }
    /*triggers {
        pollSCM('* * * * *')
    }*/
    agent {
    dockerfile {
        filename 'agents/Dockerfile.agent'
        //args '-v /var/run/docker.sock:/var/run/docker.sock'
        //args '-v frontend_cache:/var/jenkins_home/workspace/web-deployment_master/frontend/node_modules/'
    }
}
    options {
        skipDefaultCheckout false
  }
    parameters {
        string(name: 'DEPLOY_COMMIT',/*defaultValue:"7a7d9b2f81a5b4bee69e8bdb89d95e7235e85d05", */description: 'commit to deploy to website')
        choice(name: 'ENVIRONMENT', choices: ['test', 'integration', 'production'],description: 'Choose Deployment Target')
    }
    stages{
        stage("Cloud Services") {
            steps {
                dir('cloud/python'){                
                    sh 'pip install -r requirements.txt -t .'
                }
                withAWS(credentials:"aws", region:"eu-central-1") { 
                    s3Download(file:'template.yaml', bucket:'karaokemp-artifacts', path:"karaokemp-website/COMMIT-${DEPLOY_COMMIT}/cloud-services/packaged.yaml", force:true)
                    s3Download(file:'samconfig.toml',bucket:'karaokemp-artifacts', path:"karaokemp-website/COMMIT-${DEPLOY_COMMIT}/cloud-services/samconfig.toml", force:true)
                    archiveArtifacts artifacts: "*.yaml"
                    archiveArtifacts artifacts: "*.toml"

                    sh "sam deploy --stack-name ${STACK_NAME}"
                    sh "aws cloudformation describe-stacks --stack-name ${STACK_NAME} --query Stacks[0].Outputs --output table | tee output.txt"
                    sh "aws cloudformation describe-stacks --stack-name ${STACK_NAME} --query Stacks[0].Outputs | tee output.json"
                    archiveArtifacts artifacts: "output.*"
                }
            }
        }
        stage('Transfer Website files') {
            // Able to use environment variables for the build
            environment{
                REACT_APP_KARAOKEMP_API="${getStackOutput('KaraokempAPI')}"
            }
            steps {
                withAWS(credentials:"aws", region:"eu-central-1") {
                    s3Download(file: 'frontend.zip', bucket: 'karaokemp-artifacts', path: "karaokemp-website/COMMIT-${DEPLOY_COMMIT}/frontend.zip")
                    unzip zipFile: 'frontend.zip', dir: 'frontend'
                    dir('frontend'){
                        sh 'npm install'
                        sh 'npm run build'
                        sh "aws s3 sync build s3://${getFrontendBucket()} --acl public-read"
                    }
                }
            }
        }
        stage("Smoke Test"){
            steps{
                sh  "curl -i ${getWebsiteURL(getStackName())}"

            }
        }
    }
    post{
        success{
            buildDescription "${getWebsiteURL(getStackName())}" 
        }
    }
}
String getStackName() {
    script {
        def baseName = 'kcs'
        String stackName = "${ENVIRONMENT}" == 'production' ? baseName : "${baseName}-${ENVIRONMENT}"
        return stackName
    }
}
String getFrontendBucket() {
    script {
        String bucketName = "${ENVIRONMENT}" == 'production' ? "${DNS}" : "${STACK_NAME}-website-frontend"
        return bucketName
    }
}
String getWebsiteURL(String stackName){
  script{
    return getStackOutput('Website')
  } 
}
//assume there is output json made of stack defined outputs
String getStackOutput(String key){
   script{
    def outputs = readJSON file: 'output.json'
        return outputs.find { it.OutputKey == key}.OutputValue
    }
}