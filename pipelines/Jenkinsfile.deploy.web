pipeline {
    agent {
    dockerfile {
        filename 'agents/Dockerfile.agent'
        args '-v /var/run/docker.sock:/var/run/docker.sock'
    }
}
    options {
        skipDefaultCheckout false
  }
    parameters {
        string(name: 'DEPLOY_COMMIT', description: 'commit to deploy to website')
        choice(name: 'ENVIRONMENT', choices: ['test', 'integration', 'production'], description: 'Choose Deployment Target')
    }
    environment {
        STACK_NAME = getStackName()
        WEBSITE_URL = getWebsiteURL("${STACK_NAME}")
    }
    stages {
                stage("Cloud Services") {
                steps {
                        withAWS(credentials:"aws", region:"eu-central-1") { 
                            s3Download(file:'template.yaml', bucket:'karaokemp-artifacts', path:"karaokemp-website/COMMIT-${DEPLOY_COMMIT}/cloud-services/packaged.yaml", force:true)
                            s3Download(file:'samconfig.toml',bucket:'karaokemp-artifacts', path:"karaokemp-website/COMMIT-${DEPLOY_COMMIT}/cloud-services/samconfig.toml", force:true)
                            archiveArtifacts artifacts: "*.yaml"
                            archiveArtifacts artifacts: "*.toml"

                            sh "sam deploy --stack-name ${STACK_NAME}"
                            sh "aws cloudformation describe-stacks --stack-name ${STACK_NAME} --query Stacks[0].Outputs --output table | tee output.txt"
                            sh "aws cloudformation describe-stacks --stack-name ${STACK_NAME} --query Stacks[0].Outputs --output json | tee output.json"
                            script{
                                def outputs = readJSON(file: 'output.json')
                                outputs.each { key, value ->
                                    echo "Walked through key $key and value $value"
                                }
                            }
                            
                            archiveArtifacts artifacts: "output.txt" 

                        }
                }
            }
                stage('Static website files') {
                    steps {
                        withAWS(credentials:"aws", region:"eu-central-1") {
                            sh "aws s3 sync s3://karaokemp-artifacts/karaokemp-website/COMMIT-${DEPLOY_COMMIT}/frontend s3://${STACK_NAME}-website-frontend --acl public-read"
                        }
                    }
                }
        }
        post{
              success{
                buildDescription "${WEBSITE_URL}" 
              }
            }
}

String getStackName() {
    script {
        def baseName = 'kcs'
        String stackName = "${ENVIRONMENT}" == 'production' ? baseName : "${baseName}-${ENVIRONMENT}"
        return stackName
    }
}
String getWebsiteURL(String stackName){
  script{
        withAWS(credentials:"aws", region:"eu-central-1"){

    def ret = sh(script: "aws cloudformation describe-stacks --stack-name ${stackName} --query \"Stacks[0].Outputs[?OutputKey==\'Website\'].OutputValue\" --output text", returnStdout: true)
    return ret
    }        
  } 
}