pipeline {
    agent {
    dockerfile {
        filename 'Dockerfile.agent'
        //label 'my-defined-label'
        args '-v /var/run/docker.sock:/var/run/docker.sock'
    }
}
    parameters {
        string(name: 'DEPLOY_COMMIT', description: 'commit to deploy to website')
        choice(name: 'ENVIRONMENT', choices: ['TEST', 'INTEGRATION', 'PRODUCTION'], description: 'Choose Deployment Target')
    }
    stages {
        stage("Deploy to environment") {
            parallel {
                stage('Static website files') {
                    steps {
                        withAWS(credentials:"aws", region:"eu-central-1") {
                            script {
                                String path = "karaokemp-website/COMMIT-${DEPLOY_COMMIT}/frontend"
                                int pathLength = path.length() + 1
                                files = s3FindFiles(bucket:'karaokemp-artifacts', glob:"${path}/**", onlyFiles: true)
                                files.each {
                                    itemObject ->
                                    String itemPath = itemObject.toString()
                                    String item = itemPath.drop(pathLength)
                                    s3Copy(pathStyleAccessEnabled: true, fromBucket:"karaokemp-artifacts", fromPath:"${itemPath}", toBucket:'karaokemp-website', toPath:"${item}")
                                }
                            }
                        }
                    }
                }
             stage("Cloud Services") {
                environment {
                    STACK_NAME = getStackName()
                }
                steps {
                    echo "STACK: ${STACK_NAME}"
                    dir('cloud') {
                        withAWS(credentials:"aws", region:"eu-central-1") {
                            s3Download(file:'template.yaml', bucket:'karaokemp-artifacts', path:"karaokemp-website/COMMIT-${DEPLOY_COMMIT}/cloud-services/packaged.yaml", force:true)
                            sh "sam deploy --stack-name ${STACK_NAME}"
                        }
                    }
                }
            }
        }
    }
        }
}

String getStackName() {
    script {
        String stackName = "${ENVIRONMENT}" == 'PRODUCTION' ? 'karaokemp-cloud-services' : "karaokemp-cloud-services-${ENVIRONMENT}"
        return stackName
    }
}

