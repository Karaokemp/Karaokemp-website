pipeline {
    agent {
    dockerfile {
        filename 'Dockerfile.agent'
        args '-v /var/run/docker.sock:/var/run/docker.sock'
    }
}
    options {
        skipDefaultCheckout true
  }
    parameters {
        string(name: 'DEPLOY_COMMIT', description: 'commit to deploy to website')
        choice(name: 'ENVIRONMENT', choices: ['test', 'integration', 'production'], description: 'Choose Deployment Target')
    }

    environment {
        STACK_NAME = getStackName()
    }
    stages {
            
                stage("Cloud Services") {
                steps {
                        withAWS(credentials:"aws", region:"eu-central-1") {
                            s3Download(file:'template.yaml', bucket:'karaokemp-artifacts', path:"karaokemp-website/COMMIT-${DEPLOY_COMMIT}/cloud-services/packaged.yaml", force:true)
                            s3Download(file:'samconfig.toml',bucket:'karaokemp-artifacts', path:"karaokemp-website/COMMIT-${DEPLOY_COMMIT}/cloud-services/samconfig.toml", force:true)
                            archiveArtifacts artifacts: "*.yaml"
                            archiveArtifacts artifacts: "*.toml"
                            
                            sh "sam deploy | tee output.txt"
                            archiveArtifacts artifacts: "*.txt"
                        }
                }
            }
                stage('Static website files') {
                    steps {
                        withAWS(credentials:"aws", region:"eu-central-1") {
                            sh "aws s3 sync s3://karaokemp-artifacts/karaokemp-website/COMMIT-${DEPLOY_COMMIT}/frontend/** s3://${STACK_NAME}-website-frontend"
                            script {
                                String path = "karaokemp-website/COMMIT-${DEPLOY_COMMIT}/frontend"
                                int pathLength = path.length() + 1
                                files = s3FindFiles(bucket:'karaokemp-artifacts', glob:"${path}/**", onlyFiles: true)
                                files.each {
                                    itemObject ->
                                    String itemPath = itemObject.toString()
                                    String item = itemPath.drop(pathLength)
                                    s3Copy(pathStyleAccessEnabled: true, fromBucket:"karaokemp-artifacts", fromPath:"${itemPath}", toBucket:"${STACK_NAME}-website-frontend", toPath:"${item}",acl:'PublicRead')
                                }
                            }
                        }
                    }
                }
        }
}

String getStackName() {
    script {
        def baseName = 'kcs'
        String stackName = "${ENVIRONMENT}" == 'production' ? baseName : "${baseName}-${ENVIRONMENT}"
        return stackName
    }
}

